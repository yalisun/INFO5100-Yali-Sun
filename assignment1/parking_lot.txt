Design a Parking lot

Driver can
1. enter the parking lot and take a ticket 
2. park the car in the available lot fitting the car size
3. drive the car out of the lot 
4. insert ticket, make the payment and take the exit

-------------------------------------------------------
Class: Driver
Data: driverId, car, creditCard, ticket

Behavior: takeTicket() {
    this.ticket = ParkingLotService.getTicket();
}

Behavior: parkCar() {
    Lot availableLot = ParkingLotService.getAvailableLot(car.carSize);
    if (availableLot == null) {
        throw new Exception("No available lot");
    }
    // park car into the available lot
    car.setLot(availableLot);
}

Behavior: leaveLot() {
    car.resetLot();
}

Behavior: makePayment() {
    double parkingFee = ParkingLotService.insertTicket(this.ticket);
    ParkingLotService.payParkingFee(parkingFee, this.creditCard);
}

----------------------------------------------------------
Class: Car
Data: carId, carSize, lot

Behavior: setLot(lot) {
    // where this car parks
    this.lot = lot;
    lot.setCar(car);
}

Behavior: resetLot() {
    this.lot.resetCar();
    this.lot = null;
}

Behavior: getLot() {
    return this.lot;
}

-----------------------------------------------------------
Class: Ticket
Data: ticketId, startingDate

Behavior: setStartingDate(startingDate) {
    this.startingDate = startingDate;
}

-----------------------------------------------------------
Class: Lot
Data: lotId, size, car

Behavior: isAvailable() {
    // is available if there is no car
    // is not available if there is a car
    return car == null;
}

Behavior: setCar(car) {
    // car parks at current lot
    this.car = car;
}

Behavior: resetCar() {
    this.car = null;
}

-----------------------------------------------------------
Class: ParkingLotService
Data: parkingLotId, lots, price

Behavior: getTicket() {
    Ticket newTicket = new Ticket();
    Date now = new Date();
    newTicket.setStartingDate(now);
    return newTicket;
}

Behavior: getAvailableLot(carSize) {
    for (Lot lot : lots) {
        if (lot.size >= carSize && lot.isAvailable() == true) {
            return lot;
        }
    }
    return null;
}

Behavior: insertTicket(ticket) {
    Date current = new Date();
    int hours = Date.hourDiff(current, ticket.startingDate);
    double fee = this.price * hours;
    return fee;
}

Behavior: payParkingFee(parkingFee, creditCard) {
    creditCard.pay(parkingFee);   
}

------------------------------------------------------------
Class: CreditCard
Data: bankName, type, cardNumber, securityCode, expireDate, availableLimit

Behavior: pay(amount) {
    if (amount > availableLimit) {
        throw new Exception("out of credit limit"); 
    }
    Date now = new Date();
    if (now.isAfter(expireDate)) {
        throw new Exception("credit card expired!");
    }

    this.availableLimit = this.availableLimit - amount;        
}
